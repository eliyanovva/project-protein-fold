from moleculekit.molecule import Molecule
from moleculekit.tools.voxeldescriptors import getVoxelDescriptors, viewVoxelFeatures
from moleculekit.tools.atomtyper import prepareProteinForAtomtyping
from moleculekit.smallmol.smallmol import SmallMol
from moleculekit.home import home
from moleculekit.tools.atomtyper import metal_atypes
import os
import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from torch.utils.data import Dataset, DataLoader, random_split
import re
import pandas as pd

# Does all preprocessing for inputs--just need to be converted 
# into tensors with desired settings when imported

x1 = {}
x2 = {}
y = []

# os.chdir('/home/users/jvs15/project-protein-fold')

# box = [20, 20, 20]
# cent = [10, 10, 10]

# for filename in os.listdir('mol_data_files'):
#     # Following preprocessing step on Acellera page: 
#     # https://software.acellera.com/docs/latest/moleculekit/tutorials/voxelization_tutorial.html?highlight=voxelization

#     chem_name = filename[0:len(filename)-4]
#     ligand = SmallMol(f'mol_data_files/{filename}', force_reading=True)
#     lig_vox, lig_centers, lig_N = getVoxelDescriptors(ligand, voxelsize = 0.5, buffer=1, boxsize=box, center=cent)
#     lig_vox_t = lig_vox.transpose().reshape([1, 8, lig_N[0], lig_N[1], lig_N[2]])
#     lig_vox_t = torch.tensor(lig_vox_t.astype(np.float32))
#     x1[chem_name] = lig_vox_t

# os.chdir('/home/users/jvs15/project-protein-fold/moleculekit')
# x1np = np.asarray(x1)
# np.save('ligand_data_tensors.npy', x1np)

# print('Wrote ligand data\n\n\n\n\n')

os.chdir('/home/users/jvs15/project-protein-fold')

for filename in os.listdir('pdb_data_files'):
    if (filename[0:3] == 'AF-' and filename[len(filename)-4:len(filename)] == '.pdb'):
        a, b = filename.find('AF-')+3, filename.find('-F1')
        uniprot = filename[a:b]
        prot = Molecule(f'pdb_data_files/{filename}')
        prot.filter("protein or water or element {}".format(" ".join(metal_atypes)))
        prot = prepareProteinForAtomtyping(prot)
        prot_vox, prot_centers, prot_N = getVoxelDescriptors(prot, buffer = 1)
        prot_vox_t = prot_vox.transpose().reshape([1, 8, prot_N[0], prot_N[1], prot_N[2]])
        prot_vox_t = torch.tensor(prot_vox_t.astype(np.float32))
        x2[uniprot] = prot_vox_t

os.chdir('/home/users/jvs15/project-protein-fold/moleculekit')
x2np = np.asarray(x2)
np.save('protein_data_tensors.npy', x2np)

        




