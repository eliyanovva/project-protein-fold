from moleculekit.molecule import Molecule
from moleculekit.tools.voxeldescriptors import getVoxelDescriptors, viewVoxelFeatures
from moleculekit.tools.atomtyper import prepareProteinForAtomtyping
from moleculekit.smallmol.smallmol import SmallMol
from moleculekit.home import home
from moleculekit.tools.atomtyper import metal_atypes
import os
import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from torch.utils.data import Dataset, DataLoader, random_split
import re
import pandas as pd

# Does all preprocessing for inputs--just need to be converted 
# into tensors with desired settings when imported

x1 = {}
x2 = {}
y = []

os.chdir('/home/users/jvs15/project-protein-fold')

for filename in os.listdir('mol_data_files'):
    # Following preprocessing step on Acellera page: 
    # https://software.acellera.com/docs/latest/moleculekit/tutorials/voxelization_tutorial.html?highlight=voxelization

    chem_name = filename[0:len(filename)-4]
    ligand = SmallMol(f'mol_data_files/{filename}', force_reading=True)
    x1[chem_name] = ligand

os.chdir('/home/users/jvs15/project-protein-fold/moleculekit')
x1np = np.asarray(x1)
np.save('ligand_data.npy', x1np)

print('Wrote ligand data\n\n\n\n\n')

os.chdir('/home/users/jvs15/project-protein-fold')

for filename in os.listdir('pdb_data_files'):
    if (filename[0:3] == 'AF-' and filename[len(filename)-4:len(filename)] == '.pdb'):
        a, b = filename.find('AF-')+3, filename.find('-F1')
        uniprot = filename[a:b]
        prot = Molecule(f'pdb_data_files/{filename}')
        prot.filter("protein or water or element {}".format(" ".join(metal_atypes)))
        prot = prepareProteinForAtomtyping(prot)
        x2[uniprot] = prot

os.chdir('/home/users/jvs15/project-protein-fold/moleculekit')
x2np = np.asarray(x2)
np.save('protein_data.npy', x2np)

        




