from moleculekit.molecule import Molecule
from moleculekit.tools.voxeldescriptors import getVoxelDescriptors, viewVoxelFeatures
from moleculekit.tools.atomtyper import prepareProteinForAtomtyping
from moleculekit.smallmol.smallmol import SmallMol
from moleculekit.home import home
import os
import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from torch.utils.data import Dataset, DataLoader, random_split
import re
import pandas as pd

# https://rosenfelder.ai/multi-input-neural-network-pytorch/

os.chdir('/home/users/jvs15/project-protein-fold')

prot = Molecule('pdb_data_files/AF-Q8VGS3-F1-model_v2.pdb')

ligand = SmallMol('moleculekit/mol_files/Prenylacetate.mol', force_reading=True)

prot = prepareProteinForAtomtyping(prot)

prot_vox, prot_centers, prot_N = getVoxelDescriptors(prot, voxelsize=0.5, buffer=1)
lig_vox, lig_centers, lig_N = getVoxelDescriptors(ligand, voxelsize=0.5, buffer=1)

nchannels = prot_vox.shape[1]

prot_vox_t = prot_vox.transpose().reshape([1, nchannels, prot_N[0], prot_N[1], prot_N[2]])
prot_vox_t = torch.tensor(prot_vox_t.astype(np.float32))

lig_vox_t = lig_vox.transpose().reshape([1, nchannels, lig_N[0], lig_N[1], lig_N[2]])
lig_vox_t = torch.tensor(lig_vox_t.astype(np.float32))

class Pair(Dataset):
    """Protein Ligand Pair dataset"""

    def __init__(self, prot_dir, lig_structure_dir, lig_fc_dir, mart_dir):
        """
        prot_dir: directory of .pdb file
        lig_structure_dir: directory of .mol file
        lig_fc_dir: directory of de file for specific ligand
        mart_dir: directory of .tab mapping between uniprot and ensembl ids
        """

        de = pd.read_csv(lig_fc_dir)
        mart = pd.read_csv(mart_dir, sep='\t')
        # find start and stop indices in prot string corresponding to UniProt accession
        a, b = prot_dir.find('AF-'), prot_dir.find('-F1')
        uniprot = prot_dir[a+3, b]
        # Retrieves ensembl id from uniprot via mapping
        ens_id = mart.iat[(mart['Entry'] == uniprot).idxmax(), 0]

        # List attributes
        self.prot_dir = prot_dir
        self.lig_dir = lig_structure_dir
        self.lig_fc_dir = lig_fc_dir
        self.de = de.loc[de['ensemble_gene_id'] == ens_id]

    def __getfc__(self):
        return self.de.at[0, 'logFC']

    def __getfdr__(self):
        return self.de.at[0, 'FDR']

    def __getpval__(self):
        return self.de.at[0, 'PValue']

    def __getitem__(self):
        logfc = self.__get__fc()
    
        nchannels = prot_vox.shape[1]
        prot_vox_t = prot_vox.transpose().reshape([1, nchannels, prot_N[0], prot_N[1], prot_N[2]])
        prot_vox_t = torch.tensor(prot_vox_t.astype(np.float32))

        nchannels = lig_vox.shape[1]
        lig_vox_t = lig_vox.transpose().reshape([1, nchannels, lig_N[0], lig_N[1], lig_N[2]])
        lig_vox_t = torch.tensor(lig_vox_t.astype(np.float32))

        return prot_vox_t, lig_vox_t, logfc

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.conv1 = nn.Conv3d(8, 20, 5)  # (in_channels, out_channels, kernel_size)
        self.conv2 = nn.Conv3d(20, 20, 5)

    def forward(self, prot, lig):
       prot = F.relu(self.conv1(prot))
       prot = F.relu(self.conv2(prot))

       lig = F.relu(self.conv1(lig))

       return prot, lig




# model = Model()
# results = model.forward(lig_vox_t)
# print(results.shape)
