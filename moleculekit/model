from moleculekit.molecule import Molecule
from moleculekit.tools.voxeldescriptors import getVoxelDescriptors, viewVoxelFeatures
from moleculekit.tools.atomtyper import prepareProteinForAtomtyping
from moleculekit.smallmol.smallmol import SmallMol
from moleculekit.home import home
import os
import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from torch.utils.data import Dataset, DataLoader, random_split
import re
import pandas as pd

"""
Attempting to build model in lines below; kind of shit so far
Inspiration coming from following sources:
- https://rosenfelder.ai/multi-input-neural-network-pytorch/
- https://software.acellera.com/docs/latest/moleculekit/tutorials/voxelization_tutorial.html?highlight=voxelization
- https://medium.datadriveninvestor.com/dual-input-cnn-with-keras-1e6d458cd979

"""

os.chdir('/home/users/jvs15/project-protein-fold/moleculekit')

lig = np.load('ligand_data_tensors.npy', allow_pickle=True)
prot = np.load('protein_data_tensors.npy', allow_pickle=True)
de = np.load('de_data.npy', allow_pickle=True)

x = []
y = []

prot_test = prot.item().get('Q8VFN8')
lig_vox_t = lig.item().get('geranoil')

# # There are about 49k total interactions from listed ligands and proteins so far;
# # 2% of those have FDR < 0.05 and 4% have FDR < 0.25
# for i in lig.item().keys():
#     for j in prot.item().keys():
#         a = de.item().get((i, j))
#         if a.iloc[0]['FDR'] < 0.05:
#             x.append((lig.item().get(i), prot.item().get(j)))
#             if abs(a.iloc[0]['logFC']) > 1:
#                 y.append(1)
#             else:
#                 y.append(0)

# class ProtDatasetTrain(Dataset):
#     def __init__(self):

def conv_block(input_size, output_size):
    block = nn.Sequential(
        nn.Conv3d(input_size, output_size, 5, stride=1, padding=1),
        nn.LeakyReLU(),
        nn.BatchNorm3d(output_size),
        nn.MaxPool3d(2)
        # Add dropout here later
    )
    return block

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.conv1 = nn.Sequential(
            conv_block(8, 16),
            conv_block(16, 32),
            conv_block(32, 64))
        self.conv2 = nn.Sequential(
            conv_block(8, 32),
            conv_block(32, 64))

        self.flatten = nn.Flatten()
        self.LeakyReLU = nn.LeakyReLU()


    def forward(self, x1, x2):
        # Convolution blocks to be performed on the protein
        prot = self.conv1(x2)
        prot = self.flatten(prot)
        
        # Convolution blocks to be performed on the ligand
        lig = self.conv2(x1)
        lig = self.flatten(lig)

        print(prot.shape)
        print(lig.shape)
        hybrid = torch.cat((prot, lig), dim=1)
        hybrid = self.LeakyReLU(hybrid)

        return torch.sigmoid(hybrid)

model = Model()
out = model.forward(lig_vox_t, prot_vox_t)

epoch = 100
lr = 0.1

"""
for i in range(epoch):

    return
"""



